package com.dreammap.app.screens.career

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.dreammap.app.data.model.Roadmap
import com.dreammap.app.data.repositories.RoadmapRepository
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch

class CareerViewModel(
    private val roadmapRepository: RoadmapRepository
) : ViewModel() {

    // --- State for Quiz and Recommendations ---

    // Tracks the student's selected interests from the quiz results
    private val _recommendedInterests = MutableStateFlow<List<String>>(emptyList())

    // State to hold the final recommended roadmaps after the quiz
    private val _recommendedRoadmaps = MutableStateFlow<List<Roadmap>>(emptyList())
    val recommendedRoadmaps: StateFlow<List<Roadmap>> = _recommendedRoadmaps

    // --- State for Roadmap Browsing ---

    // State to hold all roadmaps for the browsing list screen
    private val _allRoadmaps = MutableStateFlow<List<Roadmap>>(emptyList())
    val allRoadmaps: StateFlow<List<Roadmap>> = _allRoadmaps

    // State to hold the details of a single selected roadmap
    private val _selectedRoadmap = MutableStateFlow<Roadmap?>(null)
    val selectedRoadmap: StateFlow<Roadmap?> = _selectedRoadmap

    // --- General UI State ---
    private val _isLoading = MutableStateFlow(false)
    val isLoading: StateFlow<Boolean> = _isLoading

    private val _errorMessage = MutableStateFlow<String?>(null)
    val errorMessage: StateFlow<String?> = _errorMessage


    init {
        // Fetch all roadmaps immediately so the list screen is ready
        fetchAllRoadmaps()
    }

    // --- Core Functions ---

    /**
     * Fetches all roadmaps for the general browsing list.
     */
    private fun fetchAllRoadmaps() = viewModelScope.launch {
        _isLoading.value = true
        _errorMessage.value = null

        try {
            _allRoadmaps.value = roadmapRepository.getAllRoadmaps()
        } catch (e: Exception) {
            _errorMessage.value = "Failed to load all career roadmaps: ${e.message}"
        } finally {
            _isLoading.value = false
        }
    }

    /**
     * Stores quiz results and fetches corresponding recommended roadmaps.
     * @param interests The list of strings generated by the quiz logic.
     */
    fun processQuizResults(interests: List<String>) = viewModelScope.launch {
        _isLoading.value = true
        _errorMessage.value = null
        _recommendedInterests.value = interests // Save interests

        try {
            // Use the repository function to query roadmaps by interests
            _recommendedRoadmaps.value = roadmapRepository.getRoadmapsByInterest(interests)
        } catch (e: Exception) {
            _errorMessage.value = "Failed to get recommendations: ${e.message}"
        } finally {
            _isLoading.value = false
        }
    }

    /**
     * Fetches details for a specific roadmap when a user clicks on one.
     * @param roadmapId The ID (title string) of the roadmap to fetch.
     */
    fun fetchRoadmapDetails(roadmapId: String) = viewModelScope.launch {
        _isLoading.value = true
        _errorMessage.value = null
        _selectedRoadmap.value = null // Clear previous selection

        try {
            _selectedRoadmap.value = roadmapRepository.getRoadmapById(roadmapId)
        } catch (e: Exception) {
            _errorMessage.value = "Failed to load roadmap details: ${e.message}"
        } finally {
            _isLoading.value = false
        }
    }

    // Function to clear details when navigating away
    fun clearSelectedRoadmap() {
        _selectedRoadmap.value = null
    }
}